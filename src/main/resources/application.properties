#BancoDeDados
spring.datasource.url=jdbc:postgresql://localhost:5432/transacao?createDatabaseIfNotExist=true
spring.datasource.username=keycloak
spring.datasource.password=password
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.hibernate-plataform=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=org.postgresql.Driver

#Kafka

spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}
kafka.topic.transacoes=${TOPIC:transacoes}

#KafkaConsumer

# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:transacoes}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}
